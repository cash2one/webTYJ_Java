package com.flf.service.impl;

import java.util.Date;
import java.util.List;
import java.util.UUID;

import com.flf.entity.AdvancePaymentsDetails;
import com.flf.entity.AreaTypeNew;
import com.flf.entity.AssetAccount;
import com.flf.entity.AssetAccountDetail;
import com.flf.entity.ChargeItemNew;
import com.flf.entity.DepositDeduct;
import com.flf.entity.PageRestful;
import com.flf.entity.Search;
import com.flf.mapper.AdvancePaymentsDetailsMapper;
import com.flf.mapper.AreaTypeNewMapper;
import com.flf.mapper.AssetAccountDetailMapper;
import com.flf.mapper.AssetAccountMapper;
import com.flf.mapper.ChargeItemNewMapper;
import com.flf.mapper.DepositDeductMapper;
import com.flf.mapper.PaymentDetailsMapper;
import com.flf.service.AssetAccountService;

public class AssetAccountServiceImpl implements AssetAccountService {

	private AssetAccountMapper assetAccountMapper;//资产账户
	private AdvancePaymentsDetailsMapper advancePaymentsDetailsMapper;//预支付明细
	private DepositDeductMapper depositDeductMapper;//押金付款表
	private AssetAccountDetailMapper assetAccountDetailMapper;//资产账户详情
	private ChargeItemNewMapper chargeItemNewMapper;//收费项目
	private PaymentDetailsMapper paymentDetailsMapper;//历史记录
	
	public AreaTypeNewMapper getAreaTypeNewMapper() {
		return areaTypeNewMapper;
	}


	public void setAreaTypeNewMapper(AreaTypeNewMapper areaTypeNewMapper) {
		this.areaTypeNewMapper = areaTypeNewMapper;
	}


	private AreaTypeNewMapper areaTypeNewMapper;//面积类型

	public PaymentDetailsMapper getPaymentDetailsMapper() {
		return paymentDetailsMapper;
	}


	public void setPaymentDetailsMapper(PaymentDetailsMapper paymentDetailsMapper) {
		this.paymentDetailsMapper = paymentDetailsMapper;
	}


	public DepositDeductMapper getDepositDeductMapper() {
		return depositDeductMapper;
	}


	public void setDepositDeductMapper(DepositDeductMapper depositDeductMapper) {
		this.depositDeductMapper = depositDeductMapper;
	}


	public AssetAccountMapper getAssetAccountMapper() {
		return assetAccountMapper;
	}


	public void setAssetAccountMapper(AssetAccountMapper assetAccountMapper) {
		this.assetAccountMapper = assetAccountMapper;
	}


	public AdvancePaymentsDetailsMapper getAdvancePaymentsDetailsMapper() {
		return advancePaymentsDetailsMapper;
	}


	public void setAdvancePaymentsDetailsMapper(
			AdvancePaymentsDetailsMapper advancePaymentsDetailsMapper) {
		this.advancePaymentsDetailsMapper = advancePaymentsDetailsMapper;
	}


	public AssetAccountDetailMapper getAssetAccountDetailMapper() {
		return assetAccountDetailMapper;
	}


	public void setAssetAccountDetailMapper(
			AssetAccountDetailMapper assetAccountDetailMapper) {
		this.assetAccountDetailMapper = assetAccountDetailMapper;
	}


	public ChargeItemNewMapper getChargeItemNewMapper() {
		return chargeItemNewMapper;
	}


	public void setChargeItemNewMapper(ChargeItemNewMapper chargeItemNewMapper) {
		this.chargeItemNewMapper = chargeItemNewMapper;
	}


	@Override
	public List<AssetAccount> getAssetAccountByCustId(String custId) {
		// TODO Auto-generated method stub
		List<AssetAccount> assetAccounts = assetAccountMapper.getAssetAccountByCustId(custId);
		if(assetAccounts!=null){
			for (AssetAccount assetAccount : assetAccounts) {
				String assetAccountId = assetAccount.getAssetAccountId();
				List<AdvancePaymentsDetails> advancePaymentsDetails = advancePaymentsDetailsMapper.getAdvancePaymentDetailByAssetAccountId(assetAccountId);
				if(advancePaymentsDetails != null && advancePaymentsDetails.size()>0){
					for (AdvancePaymentsDetails a : advancePaymentsDetails) {
						String aId = a.getAdvancePaymentsDetailsId();
						if(aId != null && !"".equals(aId)){
							Double depositDeductSum = depositDeductMapper.countDeductionsSumByAdvancePaymentId(aId);
							double depositDeductSum1 = depositDeductSum==null?0:depositDeductSum;
							a.setTransactionAmount(depositDeductSum1);
							advancePaymentsDetailsMapper.updateAdvancePaymentsDetails(a);
						}
					}
				}
				Double totalDeposits = advancePaymentsDetailsMapper.sumTransactionAmountByassetAccountId(assetAccountId);//获取押金总额
				Double totalRefundableDeposit = advancePaymentsDetailsMapper.sumRefundableDepositAmountByassetAccountId(assetAccountId);//获取可退押金总额
				assetAccount.setTotalDeposits(totalDeposits==null?0:totalDeposits);
				assetAccount.setTotalRefundableDeposit(totalRefundableDeposit==null?0:totalRefundableDeposit);
				assetAccountMapper.updateAssetAccount(assetAccount);//更新数据库
			}
		}
		return assetAccounts;
	}


	@Override
	public List<AdvancePaymentsDetails> getAdvancePaymentsDetailsByAssetAccountId(
			String assetAccountId) {
		// TODO Auto-generated method stub
		return advancePaymentsDetailsMapper.getAdvancePaymentDetailByAssetAccountId(assetAccountId);//获取资产账户下的押金明细
	}
	
	@Override
	public AssetAccount seletctAssetAccountByCustIdRest(String custId,String buildingId) {
		// TODO Auto-generated method stub
		return assetAccountMapper.seletctAssetAccountByCustId(custId,buildingId);
	}

	@Override
	public void updateAssetAccount(AssetAccount assetAccount) {
		// TODO Auto-generated method stub
		assetAccountMapper.updateAssetAccount(assetAccount);
	}
	@Override
	public List<DepositDeduct> getDepositDeductsByAdvancePaymentId(
			String advancePaymentId) {
		// TODO Auto-generated method stub
		return depositDeductMapper.getDepositDeductsByAdvancePaymentId(advancePaymentId);
	}
	
	@Override
	public PageRestful listPageAssetAccount(Search search) {
		// TODO Auto-generated method stub
		PageRestful pageRestful = new PageRestful();
		if(search.getAssetAccountType() == null || search.getAssetAccountType() == 10){
			search.setAssetAccountType(null);
		}
		if(search.getCardNum()!=null && search.getCardNum().length()>=18){
			search.setCardNum(search.getCardNum()+"S");
		}
		List<AssetAccount> assetAccounts=assetAccountMapper.listPageAssetAccount(search);
		for (AssetAccount assetAccount : assetAccounts) {
			if(assetAccount.getAreaTypeId() != null){
				AreaTypeNew areaTypeNew = areaTypeNewMapper.getAreaTypeNewByareaTypeId(assetAccount.getAreaTypeId());
				if(areaTypeNew.getAreaTypeName()!=null){
					assetAccount.setAreaTypeName(areaTypeNew.getAreaTypeName());
				}
			}else{
				assetAccount.setAreaTypeName("押金");
			}
		}
		assetAccounts.add(0,null);
		pageRestful.setAssetAccounts(assetAccounts);
		pageRestful.setPage(search.getPage());
		return pageRestful;
	}


	@Override
	public int countAccountNumByProjectId(String projectId) {
		// TODO Auto-generated method stub
		Integer accountNum = assetAccountMapper.countAccountNumByProjectId(projectId);
		if(accountNum!=null){
			return accountNum;
		}
		return 0;
	}


	/**
	 * 修改充值方法，首先判断充值的是通用余额还是收费项目金额
	 * 如果是通用余额则修改通用余额
	 * 如果是关联收费项目险判断是否已有数据，有便修改，没有便新增
	 * 王洲
	 * 2015.12.31
	 */
	@Override
	public void topUP(AssetAccount assetAccount) {
		if(assetAccount.getIfCharge().equals("1")){
			//根据收费项目id和资产账户id查询数据库中是否已有对应的数据
			AssetAccountDetail aad = assetAccountDetailMapper.getAssetAccountDetailByIdAndCiId(assetAccount.getAssetAccountId(), assetAccount.getChargeItem().getChargeItemNewId());
			//不等于空时直接修改查询出的数据
			if(aad != null){
				aad.setDisposableBalance(aad.getDisposableBalance() + assetAccount.getAddPrice());
				assetAccountDetailMapper.changePriceById(aad);
			}else{
				//查询收费项目表获取收费项目名称
				ChargeItemNew cin = new ChargeItemNew();
				cin = chargeItemNewMapper.selectByPrimaryKey(assetAccount.getChargeItem().getChargeItemNewId());
				//设置资产账户详情对象进行新增
				AssetAccountDetail aadtoadd = new AssetAccountDetail();
				aadtoadd.setAssetAccountDetailId(UUID.randomUUID().toString());
				aadtoadd.setAssetAccountId(assetAccount.getAssetAccountId());
				aadtoadd.setChargeItemId(cin.getChargeItemNewId());
//				aadtoadd.setDetailName(cin.getChargeItemNewName());
				aadtoadd.setDisposableBalance(assetAccount.getAddPrice());
				assetAccountDetailMapper.insertAssetAccountDetail(aadtoadd);
			}
		}else{
			//新增通用余额则直接修改余额的值
			Double total = assetAccount.getAddPrice() + assetAccount.getGeneralBalance();
			assetAccount.setGeneralBalance(total);
			assetAccountMapper.topUP(assetAccount);
		}
		//修改余额后在预付款明细表中增加数据
		AdvancePaymentsDetails apd = new AdvancePaymentsDetails();
		apd.setAdvancePaymentsDetailsId(UUID.randomUUID().toString());
		apd.setIsOutIn(0);
		apd.setRefundableDepositAmount(assetAccount.getAddPrice());
		apd.setAssetAccountNum(assetAccount.getAssetAccountNum());
		if(assetAccount.getPaymentType() == null){
			//apd.setPaymentType();
		}else if(assetAccount.getPaymentType().equals("0")){
			apd.setPaymentType(0);
		}else if(assetAccount.getPaymentType().equals("1")){
			apd.setPaymentType(1);
		}else if(assetAccount.getPaymentType().equals("2")){
			apd.setPaymentType(2);
		}
		if(assetAccount.getChargeItem() != null){
//			apd.setChargeItemName(assetAccount.getChargeItem().getChargeItemNewName());
		}
		if(assetAccount.getDepositNum() != null){
			apd.setDepositNum(assetAccount.getDepositNum());
		}
		apd.setTransactionDate(new Date());
		apd.setTransactionAmount(assetAccount.getAddPrice());
		//apd.setAccountBalance(total);
		apd.setAssetAccountId(assetAccount.getAssetAccountId());
		advancePaymentsDetailsMapper.insertAdvancePaymentsDetails(apd);
		//历史记录
		assetAccount.getPaymentDetails().get(0).setPaymentDetailsId(UUID.randomUUID().toString());
		assetAccount.getPaymentDetails().get(0).setTransactionDate(new Date());
		String paymentNum=Long.toString(System.currentTimeMillis());
		assetAccount.getPaymentDetails().get(0).setPaymentNum(paymentNum);
		assetAccount.getPaymentDetails().get(0).setRefundState(0);
		assetAccount.getPaymentDetails().get(0).setAssetAccountId(assetAccount.getAssetAccountId());
		if(assetAccount.getCiName()==null || assetAccount.getCiName().equals("")){
			assetAccount.setCiName("通用");
		}
		assetAccount.getPaymentDetails().get(0).setCiName(assetAccount.getCiName());
		assetAccount.getPaymentDetails().get(0).setCustId(assetAccount.getCustId());
		assetAccount.getPaymentDetails().get(0).setIsOutIn(0);

		paymentDetailsMapper.insertPaymentDetails(assetAccount.getPaymentDetails().get(0));
	}

}
