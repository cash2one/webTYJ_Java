package com.flf.service.impl;

import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.ws.rs.PathParam;

import com.flf.entity.Annex;
import com.flf.entity.BuildingStructureNew;
import com.flf.entity.Log;
import com.flf.entity.MeterReadingData;
import com.flf.entity.MeterReadingProgram;
import com.flf.entity.MeterReadingResults;
import com.flf.entity.PageRestful;
import com.flf.entity.PlanLinkBuildingStructure;
import com.flf.entity.Search;
import com.flf.entity.SearchMeter;
import com.flf.entity.WaterMeter;
import com.flf.entity.WaterMeterProject;
import com.flf.entity.WaterMeterRecords;
import com.flf.mapper.BuildingStructureNewMapper;
import com.flf.mapper.MeterMapper;
import com.flf.mapper.MeterProjectMapper;
import com.flf.mapper.MeterReadingDataMapper;
import com.flf.mapper.MeterRecordsMapper;
import com.flf.mapper.PlanLinkBuildingStructureMapper;
import com.flf.mapper.PropertyMapper;
import com.flf.request.ExcelInfo;
import com.flf.request.Info;
import com.flf.service.LogService;
import com.flf.service.LogTypeService;
import com.flf.service.WaterMeterRecordsService;
import com.flf.util.Excel;
import com.flf.util.ExcelUtils;
import com.flf.util.Tools;
/* Created by Administrator on 2015/6/15. 
author:尹磊
修改时间：2015/6/15  修改人：尹磊*/ 
public class WaterMeterRecordsServiceImpl implements WaterMeterRecordsService {
	private MeterRecordsMapper meterRecordsMapper;
	
	private MeterMapper meterMapper;

	private PropertyMapper propertyMapper;
	private LogService logService;
	
	private LogTypeService logTypeService;
	
	private MeterReadingDataMapper meterReadingDataMapper;
	
	//private PlanLinkBuildingStructureMapper planLinkBuildingStructureMapper;
	
	private MeterProjectMapper meterProjectMapper;
	
	private  BuildingStructureNewMapper buildingStructureNewMapper;
	
	
	public BuildingStructureNewMapper getBuildingStructureNewMapper() {
		return buildingStructureNewMapper;
	}


	public void setBuildingStructureNewMapper(
			BuildingStructureNewMapper buildingStructureNewMapper) {
		this.buildingStructureNewMapper = buildingStructureNewMapper;
	}


	public MeterProjectMapper getMeterProjectMapper() {
		return meterProjectMapper;
	}


	public void setMeterProjectMapper(MeterProjectMapper meterProjectMapper) {
		this.meterProjectMapper = meterProjectMapper;
	}


	


	public MeterReadingDataMapper getMeterReadingDataMapper() {
		return meterReadingDataMapper;
	}


	public void setMeterReadingDataMapper(
			MeterReadingDataMapper meterReadingDataMapper) {
		this.meterReadingDataMapper = meterReadingDataMapper;
	}


	public LogService getLogService() {
		return logService;
	}


	public void setLogService(LogService logService) {
		this.logService = logService;
	}


	public LogTypeService getLogTypeService() {
		return logTypeService;
	}


	public void setLogTypeService(LogTypeService logTypeService) {
		this.logTypeService = logTypeService;
	}


	public MeterMapper getMeterMapper() {
		return meterMapper;
	}


	public void setMeterMapper(MeterMapper meterMapper) {
		this.meterMapper = meterMapper;
	}


	public PropertyMapper getPropertyMapper() {
		return propertyMapper;
	}


	public void setPropertyMapper(PropertyMapper propertyMapper) {
		this.propertyMapper = propertyMapper;
	}


	public MeterRecordsMapper getMeterRecordsMapper() {
		return meterRecordsMapper;
	}


	public void setMeterRecordsMapper(MeterRecordsMapper meterRecordsMapper) {
		this.meterRecordsMapper = meterRecordsMapper;
	}


	/**
	 * 查询所有水表使用记录信息
	 * @return
	 */
	@Override
	public List<WaterMeterRecords> listAllWaterMeterRecords() {
		// TODO Auto-generated method stub
		return meterRecordsMapper.listAllWaterMeterRecords();
	}

	
	/**
	 * 根据id查询所有水表使用记录信息
	 * @return
	 */
	@Override
	public WaterMeterRecords getUserByIdRest(String waterMeterRecordsId) {
		// TODO Auto-generated method stub
		return meterRecordsMapper.getWaterMeterRecordsbyId(waterMeterRecordsId);
	}

	
	/**
	 * 新增水表使用记录信息
	 * @return
	 */
	@Override
	public void insertWaterMeterRecordsrest(WaterMeterRecords waterMeterRecords) {
		// TODO Auto-generated method stub
		String uuid=UUID.randomUUID().toString();
		waterMeterRecords.setWaterMeterRecordsId(uuid);
		WaterMeter waterMeter=meterMapper.getWaterMeterbyParentNum(waterMeterRecords.getParentNum());
		if(waterMeter!=null){
			waterMeterRecords.setParentId(waterMeter.getWaterMeterId());
		}
			meterRecordsMapper.insertWaterMeterRecords(waterMeterRecords);
			meterMapper.updateWaterMeter(waterMeterRecords.getWaterMeter());
			propertyMapper.updateByPrimaryKey(waterMeterRecords.getProperty());		
	}

	
	/**
	 * 修改水表使用记录信息
	 * @return
	 */
	@Override
	public void updateWaterMeterRecordsrest(WaterMeterRecords waterMeterRecords) {
		// TODO Auto-generated method stub
		meterRecordsMapper.updateWaterMeterRecords(waterMeterRecords);
	}

	
	/**
	 * 删除水表使用记录信息
	 * @return
	 */
	@Override
	public void deleteWaterMeterRecordsrest(String waterMeterRecordsId) {
		// TODO Auto-generated method stub
		meterRecordsMapper.deleteWaterMeterRecords(waterMeterRecordsId);
	}

	
	/**
	 * 根据水表id查询水表使用记录信息
	 * @return
	 */
	@Override
	public List<WaterMeterRecords> listWaterMeterRecordsbyWaterId(
			String waterMeterId) {
		// TODO Auto-generated method stub
		return meterRecordsMapper.listWaterMeterRecordsbyWaterId(waterMeterId);
	}


/*	@Override
	public PageRestful listPageWaterMeterRecords(
			WaterMeterRecords waterMeterRecords) {
		// TODO Auto-generated method stub
		PageRestful pageRestful =new PageRestful();
		List<WaterMeterRecords> WaterMeterRecordss=meterRecordsMapper.listPageWaterMeterRecords(waterMeterRecords);
		pageRestful.setWaterMeterRecords(WaterMeterRecordss);
		pageRestful.setPage(waterMeterRecords.getPage());
		return pageRestful;
	}*/

	/**
	 * 多条件查询水表接口	
	 * @return
	 */
	@Override
	public PageRestful listWaterMeterRecords(SearchMeter searchMeter) {
		// TODO Auto-generated method stub
		PageRestful pageRestful =new PageRestful();
		List<WaterMeterRecords> WaterMeterRecordss=meterRecordsMapper.listPageWaterMeterRecords(searchMeter);
		WaterMeterRecordss.add(0,null);
		pageRestful.setWaterMeterRecords(WaterMeterRecordss);
		pageRestful.setPage(searchMeter.getPage());
		return pageRestful;
	}

	/**
	 * 停用水表
	 */
	@Override
	public void updateWaterMeterRecordsrestbyNum(
			WaterMeterRecords waterMeterRecords) {
		// TODO Auto-generated method stub
	        Date date =new Date();
		if(meterRecordsMapper.updateWaterMeterRecordsbyNum(waterMeterRecords)>0){
			Log log=new Log();
			log.setOperation("停用");//操作
			log.setService("水表停用");//业务
			log.setThing("停用水表："+waterMeterRecords.getWaterMeterNum());
			log.setRelevanceId(waterMeterRecords.getMeterReadingPeople());//操作人
			log.setTable("t_water_meter_records");//操作的表名
			log.setTime(date);
			log.setRelevanceId(waterMeterRecords.getWaterMeterRecordsId());//关联id
			logService.insertWaterLog(log);//记录日志
			
		}
		WaterMeter waterMeter=meterMapper.getWaterMeterbyId(waterMeterRecords.getWaterMeterId());
		if(waterMeter!=null){
			waterMeter.setState(3);
		}
		meterMapper.updateWaterMeter(waterMeter);
		meterRecordsMapper.updateWaterMeterRecordsbyNum(waterMeterRecords);
	}


	@Override
	public List<WaterMeterRecords> listWaterMeterRecordsbybuildigIds(
			List<String> ids) {
		List<WaterMeterRecords> waterMeterRecords=new ArrayList<WaterMeterRecords>();
		for (String id : ids) {
			WaterMeterRecords waterMeterRecord=meterRecordsMapper.listWaterMeterRecordsbybuildigIds(id);
			waterMeterRecords.add(waterMeterRecord);
		}
		return waterMeterRecords;
	}


	@Override
	public WaterMeterRecords waterMeterRecordsbybuildigIds(String buldingId) {
		if(Tools.notEmpty(buldingId)){
			return meterRecordsMapper.listWaterMeterRecordsbybuildigIds(buldingId);
		}
		return null;
	}


	@Override
	public void insertWaterMeterRecords(WaterMeterRecords waterMeterRecords) {
		// TODO Auto-generated method stub
		String uuid=UUID.randomUUID().toString();
		
		waterMeterRecords.setWaterMeterRecordsId(uuid);
		WaterMeter waterMeter=meterMapper.getWaterMeterbyId(waterMeterRecords.getWaterMeterId());
		if(waterMeter!=null){
			waterMeter.setState(waterMeterRecords.getState());
		    waterMeterRecords.setAssetsId(waterMeter.getAssetsId());
			waterMeterRecords.setParentId(waterMeter.getWaterMeterId());
		
//			propertyMapper.updateByPrimaryKey(waterMeterRecords.getProperty());		
		}
		meterRecordsMapper.insertWaterMeterRecords(waterMeterRecords);
		meterMapper.updateWaterMeter(waterMeter);
	}


	@Override
	public PageRestful listPageWaterMeterRecordsById(
			WaterMeterRecords waterMeterRecords) {
		// TODO Auto-generated method stub
		PageRestful pageRestful =new PageRestful();
		List<WaterMeterRecords> WaterMeterRecordss=meterRecordsMapper.listPageWaterMeterRecordsById(waterMeterRecords);
		WaterMeterRecordss.add(0,null);
		pageRestful.setWaterMeterRecords(WaterMeterRecordss);
		pageRestful.setPage(waterMeterRecords.getPage());
		return pageRestful;
	}

	/**
	 * 2015-12-24
	 * 陶勇超
	 * 水表管理-抄表结果
	 * 抄表结果详情导入模版下载
	 */
	@Override
	public InputStream exportMeterRecords() {
		// TODO Auto-generated method stub
		//定义导入模版对象并加空对象
		  List<WaterMeterRecords> listMeter=new ArrayList<WaterMeterRecords>();
		  listMeter.add(null);
		  SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Excel ex=new Excel();
	    List<ExcelInfo> list=new ArrayList<ExcelInfo>();
		String[] headers = { "抄表人","水表编号","区域", "上月读数","本月读数"};
		String[] fields = {"meterReadingPeople","waterMeterNum","fullName","lastMonthReading","reading"};
      List<WaterMeterRecords> dataset = new ArrayList<WaterMeterRecords>();
   
      	ExcelInfo exl=new ExcelInfo();
			exl.setFields(fields);
			exl.setTitles(headers);
			exl.setSheetName("抄表结果详情");
			exl.setList(dataset);
			list.add(exl);
    
		try {
		    return ex.createExcelInputStream(list);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}


	/**
	 * 2015-12-24
	 * 陶勇超
	 * 水表管理-抄表结果
	 * 抄表结果导入
	 */
	@Override
	public Info importExcelFileMeterRecords(Annex annex) {
		// TODO Auto-generated method stub
		String filePath = annex.getAnnexAddress();
		String UUID1=java.util.UUID.randomUUID().toString();
		String UUID2=java.util.UUID.randomUUID().toString();
		String meterReadingProgramId =annex.getRelationId();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		WaterMeterRecords wmr = null;
		MeterReadingData mrd =null;
		WaterMeterProject pbs=null;
		BuildingStructureNew bsn=null;
		if (Tools.notEmpty(filePath)) {
			try {
				//导入数据插入数据库
				List<Map<Short, String>> dataList = new ExcelUtils().readExcel(filePath);
				if (dataList != null && dataList.size() > 0) {
					for (Map<Short, String> t : dataList) {
						//获取水表ID
						WaterMeter wm=new WaterMeter();
						int db =(int) Double.parseDouble(t.get((short)1));
						String waterId=Integer.toString(db);
						wm=meterMapper.getWaterMeterbyParentNum(t.get((short)1));
						bsn=new BuildingStructureNew();
						bsn=buildingStructureNewMapper.getBuildingStructureNewByFullName(t.get((short) 2));
						//从表格获取数据
						wmr=new WaterMeterRecords(); 
					    wmr.setWaterMeterId(wm.getWaterMeterId());
						wmr.setWaterMeterRecordsId(UUID1);
						wmr.setWaterMeterNum(t.get((short)1));
						wmr.setBuildingStructureId(bsn.getId());
						
						pbs=new WaterMeterProject();
						pbs.setWaterMeterRecordsId(UUID1);
						pbs.setReadingProgramId(meterReadingProgramId);
						//从表格获取数据
						mrd=new MeterReadingData();
						mrd.setMeterExecutiveId(UUID2);
						mrd.setWaterMeterRecordId(UUID1);
					    mrd.setReading(Double.parseDouble(t.get((short) 4)));
					    mrd.setLastMonthReading(Double.parseDouble(t.get((short) 3)));
						mrd.setMeterReadingPeople(t.get((short) 0));
				        mrd.setBuildingStructureId(bsn.getId()); 
						meterRecordsMapper.insertWaterMeterRecords(wmr);
						meterProjectMapper.insertWaterMeterProject(pbs);
						meterReadingDataMapper.insertMeterReadingData(mrd);
					}
					
					return Tools.msg("数据导入成功!",true);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return Tools.msg("数据导入失败!", false);
	}


	@Override
	public List<WaterMeterRecords> listWaterMeterRecordsBybuildigIds(
			String buildingStructureId) {
		// TODO Auto-generated method stub
		return meterRecordsMapper.listWaterMeterRecordsBybuildigIds(buildingStructureId);
	}


	@Override
	public List<WaterMeterRecords> listWaterMeterRecordsByIds(
			String buildingStructureId) {
		// TODO Auto-generated method stub
		return meterRecordsMapper.listWaterMeterRecordsByIds(buildingStructureId);
	}


	@Override
	public List<WaterMeterRecords> listWaterMeterRecordsByWaterMeterId(
			String waterMeterId,Integer year) {
		// TODO Auto-generated method stub
		return meterRecordsMapper.listWaterMeterRecordsByWaterMeterId(waterMeterId,year);
	}

}
