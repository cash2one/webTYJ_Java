package com.flf.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;

import com.flf.entity.BuildingStructureNew;
import com.flf.entity.ChargeItemNew;
import com.flf.entity.ChargeItemNewBuilding;
import com.flf.entity.ChargeItemNewDetails;
import com.flf.entity.ChargeTypeDetails;
import com.flf.entity.Formula;
import com.flf.mapper.BuildingStructureNewMapper;
import com.flf.mapper.ChargeItemNewBuildingMapper;
import com.flf.mapper.ChargeItemNewDetailsMapper;
import com.flf.mapper.ChargeItemNewMapper;
import com.flf.mapper.ChargeTypeDetailsMapper;
import com.flf.mapper.FormulaMapper;
import com.flf.service.ChargeItemNewService;
import com.flf.util.Tools;

public class ChargeItemNewServiceImpl implements ChargeItemNewService {
	
	private ChargeItemNewMapper chargeItemNewMapper;
	@Autowired
	private BuildingStructureNewMapper buildingStructureNewMapper;
	@Autowired
	private ChargeItemNewBuildingMapper chargeItemNewBuildingMapper; 
	@Autowired
	private ChargeTypeDetailsMapper chargeTypeDetailsMapper;
	@Autowired
	private ChargeItemNewDetailsMapper chargeItemNewDetailsMapper;
	@Autowired
	private FormulaMapper formulaMapper;

	public ChargeItemNewMapper getChargeItemNewMapper() {
		return chargeItemNewMapper;
	}

	public void setChargeItemNewMapper(ChargeItemNewMapper chargeItemNewMapper) {
		this.chargeItemNewMapper = chargeItemNewMapper;
	}

	@Override
	public List<BuildingStructureNew> getBuildingListByProidAndSchemeid(
			String projectId, String schemeId) {
		List<BuildingStructureNew>  buildingList = buildingStructureNewMapper.getBuildingStructureNewbyProjectId(projectId);
		//根据计费方案ID获取收费项目列表
		ChargeItemNew cin = new ChargeItemNew();
		cin.setSchemeId(schemeId);
		List<ChargeItemNew> cinList = chargeItemNewMapper.listAllChargeItemNew(cin);
		for(ChargeItemNew chargeItemNew:cinList){
			ChargeItemNewBuilding cib = new ChargeItemNewBuilding();
			cib.setChargeItemNewId(chargeItemNew.getChargeItemNewId());
			List<ChargeItemNewBuilding> cibList = chargeItemNewBuildingMapper.listAllChargeItemNewBuilding(cib);
			for(ChargeItemNewBuilding chargeItemNewBuilding:cibList){
				BuildingStructureNew buildingStructureNew = buildingStructureNewMapper.getBuildingStructureById(chargeItemNewBuilding.getBuildingId());
				for(int i =0;i<buildingList.size();i++){
					BuildingStructureNew bsn = buildingList.get(i);
					if(bsn.getId().equals(buildingStructureNew.getId())){
						buildingList.remove(i);
					}
				}
			}
		}
		return buildingList;
	}
	
	@Override
	public void insertChargeItemNew(ChargeItemNew chargeItemNew) {
		String chargeItemNewId = UUID.randomUUID().toString();
		for(BuildingStructureNew bsn:chargeItemNew.getBuildingStructureNewList()){
			ChargeItemNewBuilding cinb = new ChargeItemNewBuilding();
			cinb.setChargeItemNewBuildingId(UUID.randomUUID().toString());
			cinb.setChargeItemNewId(chargeItemNewId);
			cinb.setBuildingId(bsn.getId());
			chargeItemNewBuildingMapper.insertSelective(cinb);
		}
		String chargeTypeId = chargeItemNew.getChargeTypeId();
		ChargeTypeDetails chargeTypeDetails = new ChargeTypeDetails();
		chargeTypeDetails.setChargeTypeId(chargeTypeId);
		List<ChargeTypeDetails> chargeTypeDetailsList = chargeTypeDetailsMapper.listAllCharegeTypeDetails(chargeTypeDetails);
		for(ChargeTypeDetails ctd:chargeTypeDetailsList){
			ChargeItemNewDetails chargeItemNewDetails = new ChargeItemNewDetails();
			chargeItemNewDetails.setChargeItemDetailsId(UUID.randomUUID().toString());
			chargeItemNewDetails.setChargeItemNewId(chargeItemNewId);
			chargeItemNewDetails.setChargeTypeDetailsId(ctd.getChargeTypeDetailsId());
			chargeItemNewDetailsMapper.insertSelective(chargeItemNewDetails);
		}
		chargeItemNew.setChargeItemNewId(chargeItemNewId);
		chargeItemNew.setChargeItemNewNum("123456");
		chargeItemNew.setHouseNum(chargeItemNew.getBuildingStructureNewList().size());
		chargeItemNewMapper.insertSelective(chargeItemNew);
	}

	@Override
	public List<ChargeItemNew> listAllChargeItemNew(ChargeItemNew chargeItemNew) {
		List<ChargeItemNew> list = chargeItemNewMapper.listAllChargeItemNew(chargeItemNew);
		return list;
	}

	@Override
	public List<BuildingStructureNew> getBuildingListByChargeItemNewId(
			String chargeItemNewId) {
		List<BuildingStructureNew>  buildingList = new ArrayList<BuildingStructureNew>();
		ChargeItemNewBuilding cinb = new ChargeItemNewBuilding();
		cinb.setChargeItemNewId(chargeItemNewId);
		List<ChargeItemNewBuilding> cibList = chargeItemNewBuildingMapper.listAllChargeItemNewBuilding(cinb);
		for(ChargeItemNewBuilding chargeItemNewBuilding:cibList){
			BuildingStructureNew buildingStructureNew = buildingStructureNewMapper.getBuildingStructureById(chargeItemNewBuilding.getBuildingId());
			buildingList.add(buildingStructureNew);
		}
		return buildingList;
	}

	@Override
	public void deleteChargeItemNew(String chargeItemNewId) {
		if (!Tools.isEmpty(chargeItemNewId)) {
			String[] array = chargeItemNewId.split(",");
			for (int i = 0 ; i < array.length; i++) {
				chargeItemNewMapper.deleteByPrimaryKey(array[i]);
			}
		}
	}

	@Override
	public String confirmList(String chargeItemNewId) {
		Map<String,String> map=new HashMap<String,String>();
		ChargeItemNewDetails newCid = new ChargeItemNewDetails();
		newCid.setChargeItemNewId(chargeItemNewId);
		List<ChargeItemNewDetails> cidList = chargeItemNewDetailsMapper.listAllChargeItemNewDetails(newCid);
		for(ChargeItemNewDetails cid:cidList){
			Formula formula = new Formula();
			formula.setChargeItemDetailsId(cid.getChargeItemDetailsId());
			List<Formula> formulaList = formulaMapper.listAllFormula(formula);
			if(formulaList.size() == 0){
				map.put("code","3001");
				map.put("information","请确认收费项目详情下是否都建立了公式！");
			    return JSONObject.fromObject(map).toString();// 200表示成功
			}
		}
		map.put("code","200");
		map.put("information","确认成功");
	    return JSONObject.fromObject(map).toString();//200表示成功
	}
}
