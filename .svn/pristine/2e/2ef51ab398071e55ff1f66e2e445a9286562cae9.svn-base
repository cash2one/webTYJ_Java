package com.flf.service.impl;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.flf.entity.Annex;
import com.flf.entity.PageRestful;
import com.flf.entity.Property;
import com.flf.entity.WaterMeter;
import com.flf.mapper.MeterMapper;
import com.flf.mapper.PropertyMapper;
import com.flf.request.ExcelInfo;
import com.flf.request.Info;
import com.flf.service.WaterMeterRecordsService;
import com.flf.service.WaterMeterService;
import com.flf.util.Excel;
import com.flf.util.ExcelUtils;
import com.flf.util.JsonUtil;
import com.flf.util.Tools;
/* Created by Administrator on 2015/6/15. 
author:尹磊
修改时间：2015/6/15  修改人：尹磊 */
public class WaterMeterServiceImpl implements WaterMeterService {
	private MeterMapper meterMapper;
	
	private WaterMeterRecordsService waterMeterRecordsService;
	
	private PropertyMapper propertyMapper;


	
	public PropertyMapper getPropertyMapper() {
		return propertyMapper;
	}


	public void setPropertyMapper(PropertyMapper propertyMapper) {
		this.propertyMapper = propertyMapper;
	}


	public WaterMeterRecordsService getWaterMeterRecordsService() {
		return waterMeterRecordsService;
	}


	public void setWaterMeterRecordsService(
			WaterMeterRecordsService waterMeterRecordsService) {
		this.waterMeterRecordsService = waterMeterRecordsService;
	}


	public MeterMapper getMeterMapper() {
		return meterMapper;
	}


	public void setMeterMapper(MeterMapper meterMapper) {
		this.meterMapper = meterMapper;
	}


	/**
	 * 查询所有水表信息
	 * @return
	 */
	@Override
	public List<WaterMeter> listAllWaterMeter() {
		// TODO Auto-generated method stub
		return meterMapper.listAllWaterMeter();
	}

	
	/**
	 * 根据id查询所有水表信息
	 * @return
	 */
	@Override
	public WaterMeter getWaterMeterbyId(String waterMeterId) {
		// TODO Auto-generated method stub
		return meterMapper.getWaterMeterbyId(waterMeterId);
	}

	
	/**
	 * 新增水表信息
	 * @return
	 */
	@Override
	public void insertWaterMeterrest(WaterMeter waterMeter) {
		// TODO Auto-generated method stub
		String UUID1=java.util.UUID.randomUUID().toString();
		String UUID2=java.util.UUID.randomUUID().toString();
		waterMeter.setWaterMeterId(UUID1);
		waterMeter.setAssetsId(UUID2);
		waterMeter.setState(1);
		Property property=waterMeter.getProperty();
		property.setPropertyId(UUID2);
		System.out.println("1111");
		meterMapper.insertWaterMeter(waterMeter);
		propertyMapper.insert(property);
	}

	
	/**
	 * 修改水表信息
	 * @return
	 */
	@Override
	public void updateWaterMeterrest(WaterMeter waterMeter) {
		// TODO Auto-generated method stub
		meterMapper.updateWaterMeter(waterMeter);
		propertyMapper.updateByPrimaryKey(waterMeter.getProperty());
		//waterMeterRecordsService.updateWaterMeterRecordsrest(waterMeter.getWaterMeterRecords());
	}

	
	/**
	 * 删除水表信息
	 * @return
	 */
	@Override
	public void deleteWaterMeterrest(String waterMeterId) {
		// TODO Auto-generated method stub
		meterMapper.deleteWaterMeter(waterMeterId);
	}


	@Override
	public List<WaterMeter> listWaterMeterbyParent(String parentId) {
		// TODO Auto-generated method stub
		return meterMapper.listWaterMeterbyParent(parentId);
	}


	@Override
	public WaterMeter getWaterMeterbywaterMeterRecordsId(
			String waterMeterRecordsId) {
		// TODO Auto-generated method stub
		return meterMapper.getWaterMeterbywaterMeterRecordsId(waterMeterRecordsId);
	}


	@Override
	public PageRestful listPageWaterMeter(WaterMeter waterMeter) {
		// TODO Auto-generated method stub
		PageRestful pageRestful=new PageRestful();
		List<WaterMeter> waterMeters = meterMapper.listPageWaterMeter(waterMeter);
		waterMeters.add(0,null);
		pageRestful.setWaterMeter(waterMeters);
		pageRestful.setPage(waterMeter.getPage());
		return pageRestful;
	}


	@Override
	public Info importExcelFileWater(Annex annex) {
		// TODO Auto-generated method stub
		String filePath = annex.getAnnexAddress();
		String UUID1="";
		String UUID2="";
		WaterMeter waterMeter = null;
		Property property =null;
		if (Tools.notEmpty(filePath)) {
			try {
				List<Map<Short, String>> dataList = new ExcelUtils().readExcel(filePath);
				if (dataList != null && dataList.size() > 0) {
					for (Map<Short, String> t : dataList) {
						UUID1=java.util.UUID.randomUUID().toString();
						UUID2=java.util.UUID.randomUUID().toString();
						property = new Property();
						property.setPropertyId(UUID2);  //资产id
						property.setPropertyNumber(t.get((short) 0));  //资产编号
						property.setPropertyName(t.get((short) 1));  //资产名称
						property.setPropertySpecification(t.get((short) 2));  //资产规格/型号
						property.setOperator(annex.getOperatorId());  //操作人
						property.setExpirationDate(Double.parseDouble(t.get((short) 3)));  //保质期
						property.setBrand(t.get((short) 4));  //品牌
						property.setProducingArea(t.get((short) 5));  //产地
						property.setManufacturer(t.get((short) 6));  //厂商
						property.setManufacturerPhone(t.get((short) 7));  //厂商电话
						property.setCompanyId(annex.getCompanyId());
						waterMeter =new WaterMeter();
						waterMeter.setWaterMeterId(UUID1);
						waterMeter.setAssetsId(UUID2);
						if("是".equals(t.get((short)8))){
							waterMeter.setWhetherRepeatedUse(0);
						}else if("否".equals(t.get((short)8))){
							waterMeter.setWhetherRepeatedUse(1);
						}else{
							waterMeter.setWhetherRepeatedUse(1);
						}
						waterMeter.setWaterMeterNum(t.get((short) 9));
						if("新建".equals(t.get((short)10))){
							waterMeter.setState(1);
						}else if("使用中".equals(t.get((short)10))){
							waterMeter.setState(2);
						}else{
							waterMeter.setState(4);
						}
						waterMeter.setMax(Double.parseDouble(t.get((short)11)));
						waterMeter.setMin(Double.parseDouble(t.get((short)12)));
						waterMeter.setOperator(annex.getOperatorId());
						waterMeter.setRatio(Double.parseDouble(t.get((short)13)));
						meterMapper.insertWaterMeter(waterMeter);
						propertyMapper.insert(property);
					}
					return Tools.msg("数据导入成功!",true);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return Tools.msg("数据导入失败!", false);
	}


	@Override
	public InputStream exportWaterMeterFile() {
		// TODO Auto-generated method stub
		 List<WaterMeter> water=new ArrayList<WaterMeter>();
		 water.add(null);
		Excel ex=new Excel();
	    List<ExcelInfo> list=new ArrayList<ExcelInfo>();
		String[] headers = { "资产编号","资产名称","产品规格","操作人", "保质期", "品牌", "产地","厂商","厂商电话","循环使用","表编号","使用状态","最大数值","最小数值","倍率"};
		String[] fields = {"propertyNumber","propertyName","propertySpecification","operator","expirationDate","brand","producingArea","manufacturer","manufacturerPhone","whetherRepeatedUse","waterMeterNum","state","max","min","ratio"};
        List<WaterMeter> dataset = new ArrayList<WaterMeter>();


        	ExcelInfo exl=new ExcelInfo();
			exl.setFields(fields);
			exl.setTitles(headers);
			exl.setSheetName("水表导入模版");
			exl.setList(dataset);
			list.add(exl);
     
		try {
		    return ex.createExcelInputStream(list);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}


	@Override
	public WaterMeter getWaterMeterbyWaterMeterId(String waterMeterId) {
		// TODO Auto-generated method stub
		return meterMapper.getWaterMeterbyWaterMeterId(waterMeterId);
	}


	@Override
	public List<WaterMeter> getWaterMeterByBuildingStructureId(WaterMeter waterMeter) {
		List<WaterMeter> waterMeters = new ArrayList<>();
		if(waterMeter!=null && waterMeter.getBuildingStructureId()!=null && !waterMeter.getBuildingStructureId().equals("")){
			waterMeters = meterMapper.getWaterMeterByBuildingStructureId(waterMeter);
		}
		return waterMeters;
	}


	@Override
	public String getWaterMeterAndFullNameByParentId(String parentId) {
		List<WaterMeter> waterMeter = meterMapper.getWaterMeterAndFullNameByParentId(parentId);
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		if(waterMeter != null && waterMeter.size()>0){
			for (WaterMeter item : waterMeter) {
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("waterMeterRecordsId", item.getWaterMeterRecordsId());
				map.put("waterMeterNum", item.getWaterMeterNum());
				map.put("fullName", item.getFullName());
				list.add(map);
			}
			return JsonUtil.success(list, true);
		}
		return JsonUtil.failure("未查询到数据！", false);
	}


	@Override
	public WaterMeter getWaterMeterbyWaterMeterRecordId(String waterMeterRecordId) {
		return meterMapper.getWaterMeterbywaterMeterRecordsId(waterMeterRecordId);
	}

}



