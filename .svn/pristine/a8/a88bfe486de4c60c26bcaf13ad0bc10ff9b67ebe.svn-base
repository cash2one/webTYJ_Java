package com.flf.service.impl;

import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.annotation.Resource;
import javax.jws.WebService;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.handler.MessageContext;

import net.sf.json.JSONObject;

import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.flf.entity.HrAuthority;
import com.flf.entity.PostAuthority;
import com.flf.entity.TUser;
import com.flf.mapper.HrAuthorityMapper;
import com.flf.mapper.PostAuthorityMapper;
import com.flf.mapper.TUserMapper;
import com.flf.service.LoginService;
import com.flf.util.Global;
import com.flf.util.JsonUtil;
import com.flf.util.MD5Utils;
import com.flf.util.Tools;
@WebService
public class LoginServiceImpl implements LoginService{

	@Resource   
    private WebServiceContext wsContext;     
    private MessageContext mc;     
    private HttpSession session; 
	
    
	private TUserMapper tUserMapper;
	private PostAuthorityMapper postAuthorityMapper;
	private HrAuthorityMapper hrAuthorityMapper;
	
	@Override
	public String login(TUser user) {
		//获取session
		HttpServletRequest req = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();
		session = req.getSession();
		
		Set<String> authoritySet = new HashSet<String>();
		
	 	//用户名
	 	String loginName = user.getLoginName();
	 	//密码
	 	String password = user.getPassword();
	 	//判断登录名和密码是否为空
	 	if(Tools.notEmpty(loginName) && Tools.notEmpty(password)){
	 		//根据登录名查询用户
	 		TUser tuser = tUserMapper.getTUserbyLoginName(loginName);
	 		//MD5加密
	 		String pw = MD5Utils.MD5(password);
	 		
	 		if(tuser!=null){
	 			//判断用户是否禁用
	 			if(pw.equals(tuser.getPassword())){
	 				//获取岗位权限信息
	 				List<PostAuthority> paList = postAuthorityMapper.getPostAuthorityByUserId(tuser.getUserId());
	 				List<HrAuthority> hraList = hrAuthorityMapper.getHrAuthorityByUserId(tuser.getUserId());
	 				
	 				//获取岗位权限信息中的功能权限和操作权限
	 				if(paList!=null && paList.size()>0){
	 					for(PostAuthority p : paList){
	 						authoritySet.add(p.getRoleId());
	 						authoritySet.add(p.getActionId());
	 					}
	 				}
	 				//获取团队关系信息中的功能权限
	 				if(hraList!=null && hraList.size()>0){
	 					for(HrAuthority hra:hraList){
	 						authoritySet.add(hra.getPermissionsId());
	 					}
	 				}
	 				tuser.setHrAuthority(authoritySet);
	 				
	 				//获取全局的session中的value值
	 				Collection sessionVal = Global.getSessionMap().values();
	 				if(sessionVal!=null && sessionVal.size()>0){
	 					//迭代sessionVal获取user对象(防止同一个用户重复登录，限制Global的session存入)
	 					for(Iterator it= sessionVal.iterator();it.hasNext();){
	 						TUser sessionUser = (TUser) it.next();
	 						if(tuser.getLoginName().equals(sessionUser.getLoginName())){
	 							return JsonUtil.result(JSONObject.fromObject(sessionUser).toString(), "200", true);
	 						}else{
	 							tuser.setSessionId(session.getId());
	 							Global.getSessionMap().put(session.getId(), tuser);
	 						}
	 					}
	 				}else{
	 					tuser.setSessionId(session.getId());
	 					//保存session
		 				Global.getSessionMap().put(session.getId(), tuser);
	 				}
 		 		  	return JsonUtil.result(JSONObject.fromObject(tuser).toString(), "200", true);
	 			}
	 		}else{
	 			//用户不存在或以失效
	 			return JsonUtil.result(null,"2001", false);
	 		}
	 	}else{
	 		//账号或密码错误
	 		return JsonUtil.result(null,"2002", false);
	 	}
	 	//登录失败
	 	return JsonUtil.result(null,"-1", false);
	}

	public MessageContext getMc() {
		return mc;
	}

	public void setMc(MessageContext mc) {
		this.mc = mc;
	}

	public HttpSession getSession() {
		return session;
	}

	public void setSession(HttpSession session) {
		this.session = session;
	}

	public TUserMapper gettUserMapper() {
		return tUserMapper;
	}

	public void settUserMapper(TUserMapper tUserMapper) {
		this.tUserMapper = tUserMapper;
	}

	public PostAuthorityMapper getPostAuthorityMapper() {
		return postAuthorityMapper;
	}

	public void setPostAuthorityMapper(PostAuthorityMapper postAuthorityMapper) {
		this.postAuthorityMapper = postAuthorityMapper;
	}

	public HrAuthorityMapper getHrAuthorityMapper() {
		return hrAuthorityMapper;
	}

	public void setHrAuthorityMapper(HrAuthorityMapper hrAuthorityMapper) {
		this.hrAuthorityMapper = hrAuthorityMapper;
	}
}
